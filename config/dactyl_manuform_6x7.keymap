/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define FUNCTION 1

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    flavor = "tap-preferred";
};

&sk { quick-release; };

/ {
    behaviors {
        td_tt_l2: td_tt_l2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TT_L2";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&tog 2>;
        };

        shift_w: shift_w {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_W";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;
        };

        ctrl_z: ctrl_z {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_Z";
            #binding-cells = <0>;
            bindings = <&mt LCTRL Z>, <&kp LC(Z)>;

            tapping-term-ms = <100>;
        };

        a_ctrl_a: a_ctrl_a {
            compatible = "zmk,behavior-tap-dance";
            label = "A_CTRL_A";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp LC(A)>;
        };

        y_ctrl_y: y_ctrl_y {
            compatible = "zmk,behavior-tap-dance";
            label = "Y_CTRL_Y";
            #binding-cells = <0>;
            bindings = <&kp Y>, <&kp LC(Y)>;
        };

        hold_ctrl_z: hold_ctrl_z {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_CTRL_Z";
            bindings = <&kp>, <&ctrl_z>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        sk_LGUI_SLGUI: sk_LGUI_SLGUI {
            compatible = "zmk,behavior-tap-dance";
            label = "SK_LGUI_SLGUI";
            #binding-cells = <0>;
            bindings = <&sk LGUI>, <&sk LS(LGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        TMUX_PREFIX {
            bindings = <&kp RC(SLASH)>;
            key-positions = <58 63>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&kp ESC     &kp NUMBER_1    &kp NUMBER_2          &kp NUMBER_3  &kp NUMBER_4   &kp N5     &trans         &trans        &kp NUMBER_6    &kp N7        &kp N8     &kp N9   &kp N0          &kp MINUS
&kp DELETE  &kp Q           &kp W                 &kp E         &kp R          &kp T      &trans         &trans        &kp Y           &kp U         &kp I      &kp O    &kp P           &kp BACKSLASH
&kp GRAVE   &a_ctrl_a       &kp S                 &kp D         &mt LALT F     &kp G      &mo 3          &td_tt_l2     &kp H           &lt 4 J       &lt 1 K    &kp L    &kp SEMI        &kp APOS
&shift_w    &ctrl_z         &mt LC(LEFT_SHIFT) X  &kp C         &kp V          &kp B                                   &kp N           &kp M         &kp COMMA  &kp DOT  &mt LGUI SLASH  &trans
&kp Z       &sk_LGUI_SLGUI  &trans                &trans        &kp PAGE_UP    &kp SPACE  &kp BACKSPACE  &kp TAB       &kp ENTER       &kp ESCAPE    &sk LGUI   &trans   &trans          &tog 6
                                                                &kp PAGE_DOWN  &kp LEFT   &kp RIGHT      &kp UP_ARROW  &kp DOWN_ARROW  &kp LS(LGUI)
            >;
        };

        POG {
            bindings = <
&trans      &kp F1      &kp F2      &kp F3                &kp F4                 &kp F5                &trans             &trans  &trans  &trans      &trans  &trans  &trans  &trans
&trans      &kp PLUS    &kp MINUS   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN         &kp GREATER_THAN   &trans  &trans  &trans      &trans  &trans  &trans  &trans
&trans      &kp EQUAL   &kp UNDER   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SQT               &kp DOUBLE_QUOTES  &trans  &trans  &trans      &trans  &trans  &trans  &kp GRAVE
&trans      &kp COLON   &kp SLASH   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp NON_US_BACKSLASH                             &trans  &trans      &trans  &trans  &trans  &trans
&kp K_STOP  &kp K_PREV  &kp K_NEXT  &kp K_MUTE            &kp K_VOLUME_UP        &trans                &kp K_PLAY_PAUSE   &trans  &trans  &kp DELETE  &trans  &trans  &trans  &trans
                                                          &kp K_VOLUME_DOWN      &kp K_PREV            &kp K_NEXT         &trans  &trans  &trans
            >;
        };

        FN {
            bindings = <
&bt BT_CLR    &kp F1           &kp F2         &kp F3        &kp F4                &kp F5                 &kp F6      &kp F7        &kp F8        &kp F9  &kp F10  &kp F11  &kp F12  &trans
&bt BT_SEL 2  &kp EXCLAMATION  &kp AT_SIGN    &kp POUND     &kp DOLLAR            &kp PERCENT            &trans      &trans        &trans        &trans  &trans   &trans   &trans   &trans
&bt BT_SEL 3  &kp CARET        &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans      &trans        &trans        &trans  &trans   &trans   &trans   &trans
&bt BT_SEL 4  &trans           &trans         &trans        &trans                &trans                                           &trans        &trans  &trans   &trans   &trans   &trans
&trans        &trans           &trans         &trans        &kp HOME              &trans                 &trans      &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans   &trans   &trans   &trans
                                                            &kp END               &trans                 &bt BT_CLR  &trans        &trans        &trans
            >;
        };

        NUMPAD {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp KP_NUMLOCK   &trans           &kp KP_MINUS     &kp KP_PLUS      &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_ASTERISK  &trans
&trans  &trans  &trans  &trans  &trans  &trans                      &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_SLASH     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &sys_reset  &trans  &trans  &trans           &kp KP_NUMBER_0  &kp KP_DOT       &trans           &trans
                                &trans  &trans  &trans      &trans  &trans  &kp KP_ENTER
            >;
        };

        NUMERIC {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kt DOUBLE_QUOTES
&trans  &trans        &trans        &trans        &trans        &trans                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                                  &trans        &trans        &trans  &trans  &trans  &trans
            >;
        };

        FUNCTIONS {
            bindings = <
&trans  &trans   &trans   &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kt F11  &kt F12  &trans  &trans  &trans                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans   &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans  &trans   &trans  &trans  &trans  &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans        &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_LEFT  &trans          &trans        &msc SCRL_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans          &mkp LCLK       &mkp MCLK     &mkp RCLK        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &msc SCRL_UP    &trans        &trans           &trans  &trans
                                &trans  &trans  &trans  &trans  &trans          &msc SCRL_DOWN
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        FUN_ENABLER {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };
};
